#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Mar  8 12:30:48 2025

@author: rodrigo
"""
import pandas as pd
import random
from datetime import datetime, timedelta
import calendar
from sklearn.ensemble import RandomForestRegressor
import numpy as np
import logging
from config_db import GOALS, TRAINING_PERIODS, DAY_ORDER, DAYS_OF_WEEK, EXERCISES, connect_db, HYROX_STATIONS, EXERCISE_SUBSTITUTES
import os
import openpyxl
from openpyxl.styles import Font, Alignment, PatternFill
import sqlite3

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(levelname)s:%(message)s")

# Synthetic feedback dataset (for demo purposes)
SYNTHETIC_FEEDBACK = pd.DataFrame({
    "week": list(range(1, 11)),
    "difficulty": [1, 2, 3, 4, 5, 2, 3, 4, 1, 5],
    "fatigue": [1, 1, 2, 3, 4, 2, 3, 3, 2, 4],
    "intensity": [1, 2, 3, 3, 4, 2, 3, 4, 1, 5],
    "adjustment": [1.3, 1.1, 1.0, 0.9, 0.7, 1.2, 1.0, 0.8, 1.4, 0.6]
})

X = SYNTHETIC_FEEDBACK[["difficulty", "fatigue", "intensity"]]
y = SYNTHETIC_FEEDBACK["adjustment"]
MODEL = RandomForestRegressor(n_estimators=50, random_state=42).fit(X, y)

def retrieve_feedback(cursor, user_id: int) -> dict:
    """Retrieve the latest feedback for a user from the database."""
    try:
        cursor.execute("""
            SELECT satisfaction, comments, trained_until 
            FROM feedback 
            WHERE user_id = ? 
            ORDER BY trained_until DESC 
            LIMIT 1
        """, (user_id,))
        feedback = cursor.fetchone()
        if feedback:
            return {
                "satisfaction": feedback[0],
                "comments": feedback[1],
                "trained_until": feedback[2]
            }
        return {}
    except sqlite3.Error as e:
        logging.error(f"Error retrieving feedback: {e}")
        return {}

def get_user_inputs(cursor, user_id: int) -> dict:
    """Fetch user data from the database."""
    try:
        cursor.execute("""
            SELECT name, goal, training_days_per_week, experience, available_days, base_distance,
                   preferred_time, goal_date, start_date, long_run_day, session_type_preference, distance_unit
            FROM users WHERE user_id = ?""", (user_id,))
        row = cursor.fetchone()
        if not row:
            raise ValueError(f"No user found with ID {user_id}")
        inputs = dict(zip(
            ["name", "goal", "training_days_per_week", "experience", "available_days", "base_distance",
             "preferred_time", "goal_date", "start_date", "long_run_day", "session_type_preference", "distance_unit"],
            [row[i] if i != 4 else row[i].split(",") for i in range(12)]
        ))

        cursor.execute("SELECT equipment FROM user_equipment WHERE user_id = ?", (user_id,))
        inputs["equipment"] = [row[0] for row in cursor.fetchall()]

        if inputs["goal"] == "Muscle Gains":
            cursor.execute("SELECT muscle_group FROM user_muscle_focus WHERE user_id = ?", (user_id,))
            inputs["muscle_focus"] = [row[0] for row in cursor.fetchall()]
            cursor.execute("SELECT exercise, weight FROM user_starting_weights WHERE user_id = ?", (user_id,))
            inputs["starting_weights"] = dict(cursor.fetchall())
        else:
            inputs["muscle_focus"] = []
            inputs["starting_weights"] = {}

        logging.debug(f"Fetched inputs for user {user_id}: {inputs}")
        return inputs
    except sqlite3.Error as e:
        logging.error(f"Database error fetching user inputs: {e}")
        raise

def parse_feedback_comments(comments: str, trained_until: str) -> dict:
    """Parse user feedback comments into structured adjustments."""
    adjustments = {"exclude_exercises": [], "day_changes": {}, "intensity_changes": {}}
    comments = comments.lower()
    
    if "too heavy" in comments or "too intense" in comments:
        adjustments["intensity_changes"]["overall"] = "reduce"
    if "not intense enough" in comments or "increase intensity" in comments:
        adjustments["intensity_changes"]["overall"] = "increase"
    
    for ex in EXERCISE_SUBSTITUTES.keys():
        if f"change {ex.lower()}" in comments or f"{ex.lower()} is not good" in comments:
            adjustments["exclude_exercises"].append(ex)
    
    for day in DAYS_OF_WEEK:
        day_lower = day.lower()
        if f"more {day_lower}" in comments:
            adjustments["day_changes"][day] = "increase_workouts"
        if f"less {day_lower}" in comments:
            adjustments["day_changes"][day] = "reduce_workouts"
        if f"more legs on {day_lower}" in comments:
            adjustments["day_changes"][day] = "more_legs"
        if f"intensity on {day_lower}" in comments:
            adjustments["intensity_changes"][day] = "increase"
    
    if trained_until:
        try:
            adjustments["start_date"] = (datetime.strptime(trained_until, "%Y-%m-%d") + timedelta(days=1)).strftime("%Y-%m-%d")
        except ValueError:
            logging.warning(f"Invalid trained_until date: {trained_until}")
    
    logging.debug(f"Parsed adjustments from feedback: {adjustments}")
    return adjustments

def get_weekly_feedback(cursor, user_id: int, current_week: int) -> float:
    """Calculate adjustment based on historical feedback or synthetic data."""
    try:
        cursor.execute("SELECT week, satisfaction AS difficulty, fatigue, intensity FROM feedback WHERE user_id = ? AND week < ?", (user_id, current_week))
        feedback = cursor.fetchall()
        
        if not feedback:
            logging.info(f"No real feedback for user {user_id}, using default adjustment")
            return 1.0
        
        feedback_df = pd.DataFrame(feedback, columns=["week", "difficulty", "fatigue", "intensity"])
        weights = [1 + (current_week - row["week"]) * 0.1 for _, row in feedback_df.iterrows()]
        feedback_df["weight"] = weights
        
        avg_difficulty = (feedback_df["difficulty"] * feedback_df["weight"]).sum() / feedback_df["weight"].sum()
        avg_fatigue = (feedback_df["fatigue"] * feedback_df["weight"]).sum() / feedback_df["weight"].sum()
        avg_intensity = (feedback_df["intensity"] * feedback_df["weight"]).sum() / feedback_df["weight"].sum()
        
        adjustment = MODEL.predict([[avg_difficulty, avg_fatigue, avg_intensity]])[0]
        return max(0.7, min(1.3, adjustment))
    except sqlite3.Error as e:
        logging.error(f"Error retrieving feedback: {e}")
        return 1.0

def calculate_phases(total_weeks: int, experience: str, base_distance: float, goal_distance: float) -> dict:
    """Determine phase durations for running plans with clearer boundaries."""
    # Base Building: Establish endurance foundation
    base_building = max(4 if total_weeks > 20 else 3, min(8, int(5 + (total_weeks - 20) / 4))) if experience == "Advanced" else min(6, max(3, int(5 - base_distance / goal_distance * 2)))
    # Taper: Reduce volume for recovery
    taper = 3 if total_weeks > 16 else 2 if total_weeks > 8 else 1
    # Peak: Max effort/race prep
    peak = min(8, max(4, int(total_weeks * 0.25)))  # 25% of total weeks, capped
    # Build: Increase intensity/mileage (fills remaining time)
    build = max(0, total_weeks - base_building - peak - taper)
    phases = {"base_building": base_building, "build": build, "peak": peak, "taper": taper}
    logging.debug(f"Calculated phases: {phases}")
    return phases

def _generate_weekly_sessions(plan_id: str, start_date: datetime, goal_date: datetime, days: list, generator_func, **params) -> tuple[dict, list]:
    """Base function for generating weekly training sessions."""
    total_days = (goal_date - start_date).days + 1
    total_weeks = (total_days + 6) // 7
    sessions = {}
    plan_rows = []
    
    current_date = start_date
    week = params.get("start_week", 1)
    logging.info(f"Generating plan for {total_weeks} weeks, starting week {week}")
    while current_date <= goal_date:
        logging.debug(f"Generating week {week} starting {current_date.strftime('%Y-%m-%d')}")
        week_sessions, week_rows = generator_func(week, current_date, days.copy(), total_weeks, start_date=start_date, goal_date=goal_date, **params)
        logging.debug(f"Week {week} sessions: {week_sessions}")
        sessions[week] = week_sessions
        plan_rows.extend((plan_id, week, day, session) for day, session in week_rows.items())
        current_date += timedelta(days=7)
        week += 1
    
    return sessions, plan_rows

def generate_running_plan_week(week: int, current_date: datetime, days: list, total_weeks: int, base_distance: float, goal_distance: float, long_run_day: str, experience: str, adjustment: float, goal: str, start_date: datetime, goal_date: datetime, exclude_exercises: list, day_changes: dict, intensity_changes: dict) -> tuple[dict, dict]:
    """Generate one week of a running plan with enhanced phasing."""
    sessions = {}
    goal_distances = {"Marathon": 42.2, "Half Marathon": 21.1, "10K": 10.0, "5K": 5.0}
    goal_distance = goal_distances.get(goal, 42.2)
    phases = calculate_phases(total_weeks, experience, base_distance, goal_distance)
    build_start = phases["base_building"] + 1
    peak_start = build_start + phases["build"]
    taper_start = total_weeks - phases["taper"] + 1
    
    peak_distance = goal_distance * 0.9 if goal == "Marathon" else min(goal_distance * 0.9, 32)  # Cap at 90% of goal
    weekly_increase = min(2.0 * adjustment, (peak_distance - base_distance) / max(1, peak_start - 1))  # Smoother progression
    
    running_exercises = [(e[0], e[2]) for e in EXERCISES if e[5] == "legs" and e[4] in ["Marathon", "Half Marathon", "10K", "5K"] and e[0] not in exclude_exercises]
    
    available_days = sorted(random.sample(days, len(days)), key=lambda x: DAY_ORDER.get(x))
    is_recovery = (week - 1) % 4 == 0 and week < taper_start  # Recovery every 4th week
    
    # Phase-specific logic
    if week <= phases["base_building"]:
        phase = "Base Building"
        long_run_distance = base_distance + weekly_increase * (week - 1) * 0.7  # Gradual build
        short_runs = [("Easy Run", round(base_distance * 0.6, 1)), ("Recovery Run", round(base_distance * 0.4, 1))]
    elif week < peak_start:
        phase = "Build"
        long_run_distance = min(base_distance + weekly_increase * (week - phases["base_building"]), peak_distance * 0.8)
        long_run_distance *= 0.75 if is_recovery else 1.0
        short_runs = [("Tempo Run", round(long_run_distance * 0.6, 1)), ("Intervals", round(long_run_distance * 0.4, 1))]
    elif week < taper_start:
        phase = "Peak"
        long_run_distance = min(base_distance + weekly_increase * (week - phases["base_building"]), peak_distance)
        if week == taper_start - 1:  # Final peak run
            long_run_distance = peak_distance
        short_runs = [("Hill Sprints", "8x1 min"), ("Race Pace", round(long_run_distance * 0.5, 1))]
    else:
        phase = "Taper"
        taper_factor = 1 - 0.4 * (week - taper_start + 1) / phases["taper"]  # 40% drop per week
        long_run_distance = peak_distance * taper_factor
        short_runs = [("Easy Run", round(long_run_distance * 0.5, 1))]

    # Apply intensity adjustments
    week_adjustment = adjustment
    if intensity_changes.get("overall") == "reduce" or intensity_changes.get(available_days[0]) == "reduce":
        week_adjustment *= 0.9
    elif intensity_changes.get("overall") == "increase" or intensity_changes.get(available_days[0]) == "increase":
        week_adjustment *= 1.1
    long_run_distance = round(max(base_distance, long_run_distance) * (0.7 if is_recovery else week_adjustment), 1)

    # Long run session
    day = long_run_day if long_run_day in available_days else available_days.pop(0)
    if day_changes.get(day) == "more_legs" and running_exercises:
        extra_run = random.choice(running_exercises)
        sessions[day] = f"{phase}{' - Recovery' if is_recovery else ''} | Warmup: 10 min | Long Run {long_run_distance} km | Extra: {extra_run[0]} 5 km"
    else:
        sessions[day] = f"{phase}{' - Recovery' if is_recovery else ''} | Warmup: 10 min | Long Run {long_run_distance} km"
    
    # Short runs
    for name, distance in short_runs:
        if not available_days or name in exclude_exercises or (is_recovery and name not in ["Easy Run", "Recovery Run"]):
            continue
        day = available_days.pop(0)
        sessions[day] = f"{phase} | Warmup: 5 min | {name} {distance if isinstance(distance, (int, float)) else distance} km" if name != "Hill Sprints" else f"{phase} | Warmup: 5 min | {name}"
    
    logging.debug(f"Generated running plan week {week}: {sessions}")
    return sessions, sessions

def generate_hyrox_plan_week(week: int, current_date: datetime, days: list, total_weeks: int, experience: str, equipment: list, adjustment: float, start_date: datetime, goal_date: datetime, exclude_exercises: list, day_changes: dict, intensity_changes: dict) -> tuple[dict, dict]:
    """Generate one week of a Hyrox plan with explicit phasing."""
    sessions = {}
    available_stations = [s for s in HYROX_STATIONS if (s[2] in equipment or s[2] == "bodyweight" or "gym" in equipment) and s[0] not in exclude_exercises]
    support_exercises = [e for e in EXERCISES if (e[2] in equipment + ["bodyweight", "none"] or ("gym" in equipment and e[2] in ["treadmill"])) and e[0] not in exclude_exercises and e[1] in ["strength", "cardio", "endurance"]]
    strength_ex = [e for e in support_exercises if e[1] == "strength"]
    cardio_ex = [e for e in support_exercises if e[1] in ["cardio", "endurance"] or e[0] == "Rowing"] or [("Run", "cardio", "none", "Run at a steady pace", "Hyrox", "legs", "https://www.youtube.com/watch?v=example_run")]

    # Define phases
    base_weeks = max(4, total_weeks // 4)  # ~25% for endurance base
    build_weeks = max(4, (total_weeks - base_weeks) // 2)  # ~50% for skill/intensity
    peak_start = base_weeks + build_weeks + 1
    taper = 2 if total_weeks > 12 else 1
    phase, volume_factor, run_dist = (
        ("Base", 0.6, 2) if week <= base_weeks else
        ("Build", 0.8, 3) if week < peak_start else
        ("Peak", 1.0, 4) if week < total_weeks - taper + 1 else
        ("Taper", 0.5, 2)
    )

    weekly_schedule = {
        3: ["Strength", "Endurance", "Mini Hyrox"],
        4: ["Strength", "Endurance", "Mini Hyrox", "Recovery"],
        5: ["Strength", "Endurance", "Mini Hyrox", "Strength", "Recovery"],
        6: ["Strength", "Endurance", "Mini Hyrox", "Strength", "Endurance", "Recovery"]
    }.get(len(days), ["Strength", "Endurance", "Mini Hyrox", "Recovery"])
    
    week_adjustment = adjustment * volume_factor
    if intensity_changes.get("overall") == "reduce":
        week_adjustment *= 0.9
    elif intensity_changes.get("overall") == "increase":
        week_adjustment *= 1.1

    for i, day in enumerate(days):
        day_adjustment = week_adjustment
        if intensity_changes.get(day) == "reduce":
            day_adjustment *= 0.9
        elif intensity_changes.get(day) == "increase":
            day_adjustment *= 1.1
        
        training_type = weekly_schedule[i % len(weekly_schedule)]
        session_parts = ["Warm-up: 5 min jog + dynamic stretches"]
        
        if training_type == "Strength":
            selected_stations = random.sample(available_stations, min(2, len(available_stations)))
            selected_ex = random.sample(strength_ex, min(2, len(strength_ex)))
            for s in selected_stations:
                dist_or_reps = int((s[3] if len(s) > 4 else 10) * day_adjustment * (1.2 if phase == "Build" else 1.0))
                session_parts.append(f"{s[0]}: {dist_or_reps} {s[4] if len(s) > 4 else 'reps'} - 3 sets, 90s rest")
            for e in selected_ex:
                session_parts.append(f"{e[0]}: 10-12 reps - 3 sets, 90s rest")
        elif training_type == "Endurance":
            selected_stations = random.sample(available_stations, min(2, len(available_stations)))
            selected_cardio = random.choice(cardio_ex)
            for s in selected_stations:
                dist = int((s[3] if len(s) > 4 else 10) * day_adjustment * (1.5 if phase == "Peak" else 1.0))
                session_parts.append(f"{s[0]}: {dist} {s[4] if len(s) > 4 else 'reps'} - 2 rounds, 60s rest")
            session_parts.append(f"{selected_cardio[0]}: {10 if phase in ['Base', 'Taper'] else 15} min")
            session_parts.append(f"Run: {int(run_dist * day_adjustment)} km")
        elif training_type == "Mini Hyrox":
            station_count = 3 if phase == "Base" else 5 if phase in ["Build", "Peak"] else 2
            selected_stations = random.sample(available_stations, min(station_count, len(available_stations)))
            for s in selected_stations:
                dist_or_reps = int((s[3] if len(s) > 4 else 10) * day_adjustment * (1.5 if phase == "Peak" else 1.0))
                session_parts.append(f"{s[0]}: {dist_or_reps} {s[4] if len(s) > 4 else 'reps'}")
            session_parts.append(f"Run: {int(run_dist * (0.8 if phase != 'Peak' else 1.0) * day_adjustment)} km")
        elif training_type == "Recovery":
            session_parts.append("Swimming: 500m - easy pace" if phase != "Taper" else "Rest: Light stretching")
            session_parts.append("Mobility: 15 min stretching + foam rolling")
        
        session_parts.append("Cooldown: 5 min walk + static stretches")
        sessions[day] = f"{training_type} ({phase}, ~50-60 min) | " + " | ".join(session_parts)
    
    logging.debug(f"Generated Hyrox plan week {week}: {sessions}")
    return sessions, sessions

def generate_muscle_plan_week(week: int, current_date: datetime, days: list, total_weeks: int, experience: str, muscle_focus: list, equipment: list, adjustment: float, goal: str, start_date: datetime, goal_date: datetime, starting_weights: dict, exclude_exercises: list, day_changes: dict, intensity_changes: dict) -> tuple[dict, dict]:
    """Generate one week of a muscle gains plan with phasing."""
    sessions = {}
    strength_exercises = [(e[0], e[2], e[5]) for e in EXERCISES if e[4] == "Muscle Gains" and (not equipment or e[2] in equipment or e[2] == "bodyweight") and e[0] not in exclude_exercises]
    rest_intervals = {"Beginner": "90s", "Intermediate": "75s", "Advanced": "60s"}[experience]
    base_sets = {"Beginner": 3, "Intermediate": 4, "Advanced": 5}[experience]
    
    # Define phases
    base_weeks = max(4, total_weeks // 3)  # ~33% for volume
    peak_start = total_weeks - max(3, total_weeks // 6) - 1  # ~16% for peak
    taper = max(1, total_weeks // 12)  # ~8% for recovery
    build_weeks = total_weeks - base_weeks - (total_weeks - peak_start + 1) - taper
    phase, sets_factor, reps = (
        ("Base", 1.0, "12-15") if week <= base_weeks else
        ("Build", 1.2, "8-12") if week <= base_weeks + build_weeks else
        ("Peak", 1.4, "4-6") if week < total_weeks - taper + 1 else
        ("Taper", 0.8, "10-12")
    )

    muscle_pairs = [(muscle_focus[i], muscle_focus[(i + 1) % len(muscle_focus)]) for i in range(len(muscle_focus))]
    
    week_sets = min(base_sets * adjustment * sets_factor + (week - 1) // 4, 6)
    if intensity_changes.get("overall") == "reduce":
        week_sets = max(2, int(week_sets * 0.8))
    elif intensity_changes.get("overall") == "increase":
        week_sets = min(6, int(week_sets * 1.2))
    
    for day_idx, day in enumerate(days):
        day_sets = week_sets
        if intensity_changes.get(day) == "reduce":
            day_sets = max(2, int(day_sets * 0.8))
        elif intensity_changes.get(day) == "increase":
            day_sets = min(6, int(day_sets * 1.2))
        
        current_pair_idx = (week - 1 + day_idx) % len(muscle_pairs)
        muscle1, muscle2 = muscle_pairs[current_pair_idx]
        muscle1_exercises = random.sample([e for e in strength_exercises if e[2] == muscle1], min(3, len([e for e in strength_exercises if e[2] == muscle1])))
        muscle2_exercises = random.sample([e for e in strength_exercises if e[2] == muscle2], min(3, len([e for e in strength_exercises if e[2] == muscle2])))
        
        weight_adjust = starting_weights.copy()
        for ex in strength_exercises:
            if ex[0] in weight_adjust:
                weight_factor = 2.5 if phase in ["Base", "Build"] else 5.0 if phase == "Peak" else 1.0
                weight_adjust[ex[0]] += (week - 1) * weight_factor * adjustment
        
        session_parts = [f"Warmup: 5 min"]
        for muscle, exercises in [(muscle1, muscle1_exercises), (muscle2, muscle2_exercises)]:
            muscle_work = [f"{ex_name}: {int(day_sets)} sets x {reps} reps ({weight_adjust.get(ex_name, 0)} kg, {ex_equip})" for ex_name, ex_equip, _ in exercises]
            session_parts.append(f"{muscle} (22.5 min, rest {rest_intervals}): {' | '.join(muscle_work)}")
        
        sessions[day] = f"Strength ({phase}) | {' | '.join(session_parts)}"
    
    logging.debug(f"Generated muscle plan week {week}: {sessions}")
    return sessions, sessions

def export_plan_to_excel(sessions: dict, start_date: datetime, goal_date: datetime, user_id: int, user_name: str, goal: str, conn) -> str | None:
    """Export training plan to Excel with feedback tab, showing correct phases."""
    try:
        wb = openpyxl.Workbook()
        ws_plan = wb.active
        ws_plan.title = "Training Plan"
        ws_feedback = wb.create_sheet("Feedback Changes")

        bold_font = Font(bold=True)
        center_align = Alignment(horizontal="center", vertical="center")
        header_fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")

        # Training Plan Sheet
        ws_plan.append(["User Info"])
        ws_plan.append(["Name", user_name])
        ws_plan.append(["Goal", goal])
        ws_plan.append(["Start Date", start_date.strftime('%Y-%m-%d')])
        ws_plan.append(["Goal Date", goal_date.strftime('%Y%m%d')])
        ws_plan.append([])

        days_of_week = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
        training_columns = ["WEEK", "PHASE"] + days_of_week
        
        monthly_data = {}
        used_exercises = set()
        logging.debug(f"Sessions received in export: {sessions}")
        for week, week_sessions in sessions.items():
            if not isinstance(week_sessions, dict):
                logging.error(f"Invalid week_sessions structure for Week {week}: {week_sessions}")
                continue
            week_start = start_date + timedelta(days=(week - 1) * 7)
            for day_name, session in week_sessions.items():
                if day_name not in days_of_week:
                    logging.warning(f"Invalid day_name '{day_name}' in sessions, skipping")
                    continue
                day_idx = days_of_week.index(day_name)
                session_date = week_start + timedelta(days=(day_idx - week_start.weekday()) % 7)
                if start_date <= session_date <= goal_date:
                    month_key = session_date.strftime("%B %Y")
                    # Fix phase parsing: extract before first " | ", handle both formats
                    phase_part = session.split(" | ")[0]
                    if " (" in phase_part:  # For Hyrox/Muscle Gains: "Strength (Peak)"
                        phase = phase_part.split(" (")[1].split(")")[0]
                    else:  # For Running: "Base Building"
                        phase = phase_part
                    monthly_data.setdefault(month_key, {}).setdefault((f"Week {week}", day_idx, session_date.day, day_name), (phase, session))
                    for ex in EXERCISES + HYROX_STATIONS:
                        if ex[0] in session:
                            used_exercises.add(ex)

        for month, data in monthly_data.items():
            ws_plan.append([f"{month.upper()} TRAINING PLAN"])
            ws_plan.append(training_columns)
            for col_num, col_name in enumerate(training_columns, 1):
                cell = ws_plan.cell(row=ws_plan.max_row, column=col_num)
                cell.font = bold_font
                cell.alignment = center_align
                cell.fill = header_fill

            current_week = None
            month_num = list(calendar.month_name).index(month.split()[0])
            year = int(month.split()[1])
            for day_num in range(1, calendar.monthrange(year, month_num)[1] + 1):
                date = datetime(year, month_num, day_num)
                weekday_idx = date.weekday()
                week_num = (date - start_date).days // 7 + 1

                if current_week is None or date.weekday() == 0:
                    if current_week:
                        ws_plan.append([current_week.get(col, "") for col in training_columns])
                    current_week = {col: "" for col in training_columns}
                    current_week["WEEK"] = f"Week {week_num}"

                session_text = next((f"{day_num}: {data[key][1]}" for key in data if key[1] == weekday_idx and key[2] == day_num), f"{day_num}")
                if date == goal_date:
                    session_text += " | Goal Day!"
                current_week[days_of_week[weekday_idx]] = session_text
                current_week["PHASE"] = next((data[key][0] for key in data if key[1] == weekday_idx and key[2] == day_num), "")

                if date.weekday() == 6 or day_num == calendar.monthrange(date.year, date.month)[1]:
                    ws_plan.append([current_week.get(col, "") for col in training_columns])
                    current_week = None

            ws_plan.append([])

        ws_plan.append(["EXERCISES LIST"])
        ws_plan.append(["EXERCISE", "DESCRIPTION", "EQUIPMENT", "YOUTUBE LINK"])
        for col_num, col_name in enumerate(["EXERCISE", "DESCRIPTION", "EQUIPMENT", "YOUTUBE LINK"], 1):
            cell = ws_plan.cell(row=ws_plan.max_row, column=col_num)
            cell.font = bold_font
            cell.alignment = center_align
        
        for exercise in sorted(used_exercises, key=lambda x: x[0]):
            desc = exercise[5] if len(exercise) > 6 else exercise[3]
            youtube = exercise[6] if len(exercise) > 6 else exercise[-1]
            ws_plan.append([exercise[0], desc, exercise[2], youtube])

        feedback_headers = ["Satisfaction", "Comments", "Trained Until", "Progress Weights", "Adjustments Made"]
        ws_feedback.append(feedback_headers)
        for col_num, col_name in enumerate(feedback_headers, 1):
            cell = ws_feedback.cell(row=1, column=col_num)
            cell.font = bold_font
            cell.alignment = center_align
            cell.fill = header_fill

        cursor = conn.cursor()
        cursor.execute("SELECT satisfaction, comments, trained_until, progress_weights, weight_unit FROM feedback WHERE user_id = ? ORDER BY trained_until", (user_id,))
        for row in cursor.fetchall():
            satisfaction, comments, trained_until, progress_weights, weight_unit = row
            adjustments = parse_feedback_comments(comments, trained_until)
            adjustments_str = "; ".join([f"{k}: {v}" for k, v in adjustments.items() if k != "start_date"])
            if "start_date" in adjustments:
                adjustments_str += f"; New Start Date: {adjustments['start_date']}"
            weights_str = f"{progress_weights} ({weight_unit})" if progress_weights else "N/A"
            ws_feedback.append([satisfaction, comments, trained_until, weights_str, adjustments_str or "None"])

        for ws in [ws_plan, ws_feedback]:
            for col in ws.columns:
                max_length = max((len(str(cell.value)) if cell.value else 0) for cell in col) + 2
                ws.column_dimensions[col[0].column_letter].width = max_length

        output_dir = "./plans/"
        os.makedirs(output_dir, exist_ok=True)
        excel_filename = os.path.join(output_dir, f"{user_name.replace(' ', '_')}_{goal.replace(' ', '_')}_{goal_date.strftime('%Y%m%d')}.xlsx")
        wb.save(excel_filename)
        logging.info(f"Plan exported to {excel_filename}")
        return excel_filename
    except Exception as e:
        logging.error(f"Failed to export plan: {e}")
        return None

def generate_training_plan(cursor, conn, user_id: int, adjustments: dict = None) -> tuple[str, dict]:
    """Generate a training plan based on user data and store it in the database."""
    if adjustments is None:
        adjustments = {}
    
    try:
        logging.info(f"Fetching user data for user_id {user_id}")
        cursor.execute("""
            SELECT name, goal, training_days_per_week, experience, available_days, base_distance, 
                   preferred_time, goal_date, start_date, long_run_day, session_type_preference, 
                   distance_unit
            FROM users WHERE user_id = ?
        """, (user_id,))
        user_data = cursor.fetchone()
        if not user_data:
            logging.error(f"No user found with ID {user_id}")
            return None, {}

        name, goal, training_days_per_week, experience, available_days, base_distance, preferred_time, goal_date, start_date, long_run_day, session_type_preference, distance_unit = user_data
        
        logging.info(f"User data fetched: name={name}, goal={goal}, days_per_week={training_days_per_week}")
        logging.info(f"Raw available_days from DB: {available_days}")
        start_date = datetime.strptime(start_date, '%Y-%m-%d')
        goal_date = datetime.strptime(goal_date, '%Y-%m-%d')
        available_days_list = available_days.split(",")
        selected_days = []
        for day in available_days_list[:training_days_per_week]:
            day = day.strip()
            matched_day = next((d for d in DAYS_OF_WEEK if d.lower().startswith(day.lower())), None)
            if matched_day:
                selected_days.append(matched_day)
            else:
                logging.warning(f"Invalid day '{day}' in available_days, skipping")
        if not selected_days:
            logging.warning(f"No valid days found, defaulting to ['Monday', 'Wednesday']")
            selected_days = ["Monday", "Wednesday"]
        logging.info(f"Selected days for user {user_id}: {selected_days}")

        cursor.execute("SELECT equipment FROM user_equipment WHERE user_id = ?", (user_id,))
        equipment = [row[0] for row in cursor.fetchall()]
        
        muscle_focus = []
        starting_weights = {}
        if goal == "Muscle Gains":
            cursor.execute("SELECT muscle_group FROM user_muscle_focus WHERE user_id = ?", (user_id,))
            muscle_focus = [row[0] for row in cursor.fetchall()]
            cursor.execute("SELECT exercise, weight FROM user_starting_weights WHERE user_id = ?", (user_id,))
            starting_weights = dict(cursor.fetchall())

        total_days = (goal_date - start_date).days + 1
        training_duration = (total_days + 6) // 7
        logging.info(f"Training duration calculated: {training_duration} weeks")

        plan_id = f"{user_id}_{goal}_{goal_date.strftime('%Y%m%d')}"
        logging.info(f"Inserting plan with ID {plan_id}")
        cursor.execute("""
            INSERT OR REPLACE INTO plans (plan_id, user_id, goal, start_date, goal_date, training_duration, training_days_per_week, experience)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        """, (plan_id, user_id, goal, start_date.strftime('%Y-%m-%d'), goal_date.strftime('%Y-%m-%d'), 
              training_duration, training_days_per_week, experience))
        
        logging.info(f"Generating weekly sessions for goal {goal}")
        if goal == "Hyrox":
            sessions, plan_rows = _generate_weekly_sessions(
                plan_id, start_date, goal_date, selected_days, generate_hyrox_plan_week,
                equipment=equipment, experience=experience, adjustment=adjustments.get("intensity", 1.0),
                exclude_exercises=adjustments.get("exclude_exercises", []),
                day_changes=adjustments.get("day_changes", {}),
                intensity_changes=adjustments.get("intensity_changes", {})
            )
        elif goal in ["Marathon", "Half Marathon", "10K", "5K"]:
            sessions, plan_rows = _generate_weekly_sessions(
                plan_id, start_date, goal_date, selected_days, generate_running_plan_week,
                base_distance=base_distance, goal_distance=GOALS[goal], long_run_day=long_run_day,
                experience=experience, adjustment=adjustments.get("intensity", 1.0),
                goal=goal,  # Fixed here
                exclude_exercises=adjustments.get("exclude_exercises", []),
                day_changes=adjustments.get("day_changes", {}),
                intensity_changes=adjustments.get("intensity_changes", {})
            )
        elif goal == "Muscle Gains":
            sessions, plan_rows = _generate_weekly_sessions(
                plan_id, start_date, goal_date, selected_days, generate_muscle_plan_week,
                experience=experience, muscle_focus=muscle_focus, equipment=equipment,
                starting_weights=starting_weights, adjustment=adjustments.get("intensity", 1.0),
                goal=goal, exclude_exercises=adjustments.get("exclude_exercises", []),
                day_changes=adjustments.get("day_changes", {}),
                intensity_changes=adjustments.get("intensity_changes", {})
            )
        else:
            sessions, plan_rows = _generate_weekly_sessions(
                plan_id, start_date, goal_date, selected_days, generate_hyrox_plan_week,
                equipment=equipment, experience=experience, adjustment=adjustments.get("intensity", 1.0),
                exclude_exercises=adjustments.get("exclude_exercises", []),
                day_changes=adjustments.get("day_changes", {}),
                intensity_changes=adjustments.get("intensity_changes", {})
            )

        logging.info(f"Generated sessions: {sessions}")
        logging.info(f"Inserting {len(plan_rows)} rows into training_plans")
        for row in plan_rows:
            cursor.execute("INSERT INTO training_plans (plan_id, week, day, session) VALUES (?, ?, ?, ?)", row)
        
        logging.info("Exporting plan to Excel")
        excel_file = export_plan_to_excel(sessions, start_date, goal_date, user_id, name, goal, conn)
        cursor.execute("UPDATE plans SET excel_file = ? WHERE plan_id = ?", (excel_file, plan_id))
        
        conn.commit()
        logging.debug(f"Generated plan before return: {sessions}")
        return plan_id, sessions
    
    except Exception as e:
        logging.error(f"Error generating training plan: {e}")
        conn.rollback()
        return None, {}
